# Mandatory

## Fully implement state machine:
 * [x] PUT on existing resource -> P11
 * [ ] New resource P11 -> processRequestBody
 * [ ] Decision B2
 * [ ] Positive path for M7 & N5 -> N11, etc.
 * [ ] Fix delete path around M20
 * [ ] Conflict handling O14
 * [ ] Multiple representations O18
 * [ ] Responses with no entity O20
 * [ ] Redirect N11
 * [ ] Call finish_request
 * [ ] Authorization
 * [ ] Add vary header, including resource.getVariances()

## Conneg
 * [x] header specified; resource specified -> Conneg, header
 * [x] header unspecified; resource specified -> No conneg, header
 * [x] header specified; resource unspecified -> No conneg, no header // How does WM handle this?
 * [x] neither specified -> No conneg, no header
 * [x] Consistent API
 * [ ] Consistent Javadoc
 * [ ] Consistent implementation
 * [ ] Missing tests for parser
 * [ ] Missing tests for negotiator
 * [ ] Media type selection based on params (e.g. 'text/html;level=1')
 * [ ] Setting of 'Vary' header following negotiations (decision G07). Think this can be hard-coded?
  
## Bindings
 * [x] Simple HTTP
 * [x] Netty
   
## Config
 * [x] Charset for parsing request path.
 * [ ] Max worker threads.
   
 [ ] Review closing of streams, ensure it is implemented consistently.

 [ ] Media type parameters.

 [x] Host name determination: Manually specified.
   
 [ ] Exceptions are a more idiomatic way to handle 4** errors - use them.
  
 [ ] Enhanced error handling.

 [x] Improve Request API.
 
 [ ] Improve Response API.
 
 [x] Improve Resource API.

 [x] Add a `Path getPath(Charset cs)` method? Path class can split then decode each path element.
 
 [ ] Change query methods to `Query getQuery(Charset cs)`

 [x] Support for multiple headers with the same key.

 [x] Type safe header access.

 [x] RegexDispatcher.
 
 [ ] Make dispatcher matches available in the request. Add a `getDispatchValue(int i)` which delegates to `m.group(1)`.
 
 [x] rfc-2616:5.1.2 Servers SHOULD respond to invalid Request-URIs with an appropriate status code.
 
 [x] Rename engine methods to include test.
 
 [x] Parse request URI on request create and validate.
 
 [ ] Use the term 'body' or 'entity' but not both.
 
 [ ] Use the term 'domain' or 'host' but not both.
 
 [ ] Use the term 'content type' or 'media type' but not both.


# Enhancement
 [ ] Create a table of each response code & whether it is cacheable.

 [ ] Confirm we respect rfc-2616:19.6.1.1 for domain names.

 [ ] Tests for large requests & responses.
 
 [ ] Test that request URI is not opaque.

 [ ] Also support for parsing of matrix param's in Paths.
 
 [ ] Type safe param access - separate collections for query and encoded body.

 [ ] Chunked encoding; Request#isChunked() method.
 
 [ ] Keep alive; ConnectionHeader class.

 [ ] Support for wildcard request URIs: http://rfc2616.com/#section-5

 [ ] Confidential transport
 * http://docs.jboss.org/netty/3.2/xref/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.html
 * http://docs.jboss.org/netty/3.2/xref/org/jboss/netty/example/securechat/package-summary.html
 * org.jboss.netty.handler.ssl.SslHandler

 [ ] PATCH method http://greenbytes.de/tech/webdav/rfc5789.html

## Headers
 * [ ] Content Disposition - http://greenbytes.de/tech/webdav/rfc6266.html
 * [ ] Link - http://greenbytes.de/tech/webdav/rfc5988.html
 * [ ] Setting of 'Cache-Control' header.
 * [ ] Security header support: http://www.barracudalabs.com/wordpress/index.php/2011/07/21/google-gets-a-1-for-browser-security-3/
 * [ ] SEO header support - e.g. "X-Robots-Tag: noindex"
 * [ ] Support for 'Authorization' header (http://greenbytes.de/tech/webdav/rfc2617.html).

 [ ] Remove log4j use built-in logging.

 [ ] Create a Java 7 FileResource.

 [ ] Add async versions of Request & Response using Java 7 nio.

 [ ] Support for request with Content-Encoding header, incl 415 response (see rfc-2616#14.11).

 [ ] Request/response Logging.

 [ ] Range support.

## GZip compression
 * [ ] for 'Content-Encoding' header
 * [ ] ETag support
 * [ ] 'Compressable' resource base class.

 [ ] Cookie support (See http://download.oracle.com/javase/6/docs/api/java/net/HttpCookie.html).

 [ ] Improved 503 support: 'Retry-After' and configurable entity body.

 [ ] Easy to test each method on a resource e.g. isWellFormed()
 
 [ ] CONNECT support? See http://rfc2616.com/#section-5


## Bindings
 * [ ] Grizzly
 * [ ] Servlet API
 * [ ] Finagle

   
# Specifications
 * [ ] http://tools.ietf.org/html/draft-gregorio-uritemplate-06


# Ideas
 * HTML5 canvas version of HTTP flow chart
 * Support for performance features recommended via YSlow & PageSpeed
 * URI templating library
 * Ideas from HTML5 boilerplate lib
 * P3P support
  
# Issues

No way to send 202 for PUT requests - see comments in P11_new_resource.
