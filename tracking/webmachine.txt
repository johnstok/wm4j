# Mandatory

## Fully implement state machine:
  * [x] PUT on existing resource -> P11
  * [ ] New resource P11 -> processRequestBody
  * [ ] Decision B2
  * [ ] Positive path for M7 & N5 -> N11, etc.
  * [ ] Fix delete path around M20
  * [ ] Conflict handling O14
  * [ ] Multiple representations O18
  * [ ] Responses with no entity O20
  * [ ] Redirect N11
  * [ ] Call finish_request

## Conneg
  * [x] header specified; resource specified -> Conneg, header
  * [x] header unspecified; resource specified -> No conneg, header
  * [x] header specified; resource unspecified -> No conneg, no header // How does WM handle this?
  * [x] neither specified -> No conneg, no header
  * [x] Consistent API
  * [ ] Consistent Javadoc
  * [ ] Consistent implementation
  * [ ] Missing tests for parser
  * [ ] Missing tests for negotiator
  * [ ] Media type selection based on params (e.g. 'text/html;level=1')
  * [ ] Setting of 'Vary' header following negotiations (decision G07). Think this can be hard-coded?
  
## Bindings
  * Servlet API
  * Simple HTTP
  * Extract common code to abstract base class.
   
## Config
  * [ ] Charset for parsing request path.
  * [ ] Max worker threads.
   
!!! Who closes IO streams?
   
Exceptions are a more idiomatic way to handle 4** errors - use them.
  
Enhanced error handling.

Improve Request,Response,Resource APIs.

Setting of 'Cache-Control' header.

Implementation of Path object's methods.

Support for multiple headers with the same key.

Type safe header access

Type safe param access - separate collections for query and encoded body

RegexDispatcher 


# Enhancement

Remove log4j use built-in logging.

Create a Java 7 FileResource.

Add async versions of Request & Response using Java 7 nio.

Support for request with Content-Encoding header, incl 415 response (see rfc-2616#14.11).

Request/response Logging.

Range support.

# GZip compression
  * for 'Content-Encoding' header
  * ETag support
  * 'Compressable' resource base class.

Cookie support (See http://download.oracle.com/javase/6/docs/api/java/net/HttpCookie.html).

Content-Disposition? (See RFC)

Support for 'Authorization' header.

Improved 503 support: 'Retry-After' and configurable entity body.

Easy to test each method on a resource e.g. isWellFormed()

## Bindings
   * Grizzly
   * Finagle


# Ideas
  * HTML5 canvas version of HTTP flow chart
  * Support for performance features recommended via YSlow & PageSpeed
  * URI templating library
  * Ideas from HTML5 boilerplate lib
  * PÂ£P support
  
# Issues

No way to send 202 for PUT requests - see comments in P11_new_resource.
